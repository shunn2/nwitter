{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chsid\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\React\\\\Twitter_Clone\\\\twitter\\\\src\\\\routes\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport { dbService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\nimport Ntweet from \"components/Ntweet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = _ref => {\n  _s();\n\n  let {\n    userObj\n  } = _ref;\n  const [ntweet, setNtweet] = useState(\"\");\n  const [ntweets, setNtweets] = useState([]);\n  const [attachment, setAttachment] = useState(); // 이 방법을 하면 리렌더링되서 실시간 반영이 안됨.\n  //   const getNtweets = async () => {\n  //     const dbntweets = await dbService.collection(\"ntweets\").get();\n  //     dbntweets.forEach((document) => {\n  //       const ntweetObject = {\n  //         ...document.data(),\n  //         id: document.id,\n  //       };\n  //       setNtweets((prev) => [ntweetObject, ...prev]);\n  //     }); // 새로 작성한 것들과 이전의 것들을 합쳐서 배열로 리턴함.\n  //   };\n\n  useEffect(() => {\n    // getNtweets();\n    dbService.collection(\"ntweets\").onSnapshot(snapshot => {\n      const ntweetArray = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setNtweets(ntweetArray);\n    });\n  }, []); //   useEffect(() => {\n  //     dbService.collection(\"ntweets\").get();\n  //   }, []);\n\n  const onSubmit = async event => {\n    event.preventDefault();\n    await dbService.collection(\"ntweets\").add({\n      text: ntweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid\n    });\n    setNtweet(\"\");\n  };\n\n  const onChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setNtweet(value);\n  };\n\n  const onFileChange = event => {\n    const {\n      target: {\n        files\n      }\n    } = event;\n    const theFile = files[0]; //log에서 알아냄 후에 fileReader API 사용\n\n    const reader = new FileReader();\n\n    reader.onloadend = finishedEvent => {\n      const {\n        currentTarget: {\n          result\n        }\n      } = finishedEvent;\n      setAttachment(result); //url\n    };\n\n    reader.readAsDataURL(theFile);\n  };\n\n  const onClearPhotoClick = () => setAttachment(null);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: ntweet,\n        onChange: onChange,\n        type: \"text\",\n        placeholder: \"What's on your mind?\",\n        maxLength: 120\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: onFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Ntweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), attachment && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: attachment,\n          width: \"50px\",\n          height: \"50px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClearPhotoClick,\n          children: \"Clear Photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ntweets.map(ntweet => /*#__PURE__*/_jsxDEV(Ntweet, {\n        ntweetObj: ntweet,\n        isOwner: ntweet.creatorId === userObj.uid\n      }, ntweet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"HMrLyBw//vip3k4VGxnpuepEL30=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/chsid/OneDrive/바탕 화면/React/Twitter_Clone/twitter/src/routes/Home.js"],"names":["dbService","React","useEffect","useState","Ntweet","Home","userObj","ntweet","setNtweet","ntweets","setNtweets","attachment","setAttachment","collection","onSnapshot","snapshot","ntweetArray","docs","map","doc","id","data","onSubmit","event","preventDefault","add","text","createdAt","Date","now","creatorId","uid","onChange","target","value","onFileChange","files","theFile","reader","FileReader","onloadend","finishedEvent","currentTarget","result","readAsDataURL","onClearPhotoClick"],"mappings":"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","sourcesContent":["import { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Ntweet from \"components/Ntweet\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [ntweet, setNtweet] = useState(\"\");\r\n  const [ntweets, setNtweets] = useState([]);\r\n  const [attachment, setAttachment] = useState();\r\n  // 이 방법을 하면 리렌더링되서 실시간 반영이 안됨.\r\n  //   const getNtweets = async () => {\r\n  //     const dbntweets = await dbService.collection(\"ntweets\").get();\r\n  //     dbntweets.forEach((document) => {\r\n  //       const ntweetObject = {\r\n  //         ...document.data(),\r\n  //         id: document.id,\r\n  //       };\r\n  //       setNtweets((prev) => [ntweetObject, ...prev]);\r\n  //     }); // 새로 작성한 것들과 이전의 것들을 합쳐서 배열로 리턴함.\r\n  //   };\r\n  useEffect(() => {\r\n    // getNtweets();\r\n    dbService.collection(\"ntweets\").onSnapshot((snapshot) => {\r\n      const ntweetArray = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\r\n      setNtweets(ntweetArray);\r\n    });\r\n  }, []);\r\n  //   useEffect(() => {\r\n  //     dbService.collection(\"ntweets\").get();\r\n  //   }, []);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.collection(\"ntweets\").add({\r\n      text: ntweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n    });\r\n    setNtweet(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNtweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0]; //log에서 알아냄 후에 fileReader API 사용\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result); //url\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n  const onClearPhotoClick = () => setAttachment(null);\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <input value={ntweet} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" maxLength={120} />\r\n        <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n        <input type=\"submit\" value=\"Ntweet\" />\r\n        {attachment && (\r\n          <div>\r\n            <img src={attachment} width=\"50px\" height=\"50px\" />\r\n            <button onClick={onClearPhotoClick}>Clear Photo</button>\r\n          </div>\r\n        )}\r\n      </form>\r\n      <div>\r\n        {ntweets.map((ntweet) => (\r\n          <Ntweet key={ntweet.id} ntweetObj={ntweet} isOwner={ntweet.creatorId === userObj.uid} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}