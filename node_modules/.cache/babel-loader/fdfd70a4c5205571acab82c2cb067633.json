{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chsid\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\React\\\\Twitter_Clone\\\\twitter\\\\src\\\\components\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged(user => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: args => user.updateProfile(args)\n        });\n      } else {\n        setIsLoggedIn(false);\n      }\n\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: args => user.updateProfile(args)\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [init ? /*#__PURE__*/_jsxDEV(AppRouter, {\n      refreshUser: refreshUser,\n      isLoggedIn: isLoggedIn,\n      userObj: userObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }, this) : \"Initializing..\", /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: [\"\\xA9 Ntwitter \", new Date().getFullYear()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"+8UWPZeDHvBWUbvjuGH9aya/3CQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/chsid/OneDrive/바탕 화면/React/Twitter_Clone/twitter/src/components/App.js"],"names":["React","useEffect","useState","AppRouter","authService","App","init","setInit","isLoggedIn","setIsLoggedIn","userObj","setUserObj","onAuthStateChanged","user","displayName","uid","updateProfile","args","refreshUser","currentUser","Date","getFullYear"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,SAASC,WAAT,QAA4B,OAA5B;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,WAAW,CAACQ,kBAAZ,CAAgCC,IAAD,IAAU;AACvC,UAAIA,IAAJ,EAAU;AACRJ,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,QAAAA,UAAU,CAAC;AACTG,UAAAA,WAAW,EAAED,IAAI,CAACC,WADT;AAETC,UAAAA,GAAG,EAAEF,IAAI,CAACE,GAFD;AAGTC,UAAAA,aAAa,EAAGC,IAAD,IAAUJ,IAAI,CAACG,aAAL,CAAmBC,IAAnB;AAHhB,SAAD,CAAV;AAKD,OAPD,MAOO;AACLR,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD;;AACDF,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD,KAZD;AAaD,GAdQ,EAcN,EAdM,CAAT;;AAeA,QAAMW,WAAW,GAAG,MAAM;AACxB,UAAML,IAAI,GAAGT,WAAW,CAACe,WAAzB;AACAR,IAAAA,UAAU,CAAC;AACTG,MAAAA,WAAW,EAAED,IAAI,CAACC,WADT;AAETC,MAAAA,GAAG,EAAEF,IAAI,CAACE,GAFD;AAGTC,MAAAA,aAAa,EAAGC,IAAD,IAAUJ,IAAI,CAACG,aAAL,CAAmBC,IAAnB;AAHhB,KAAD,CAAV;AAKD,GAPD;;AAQA,sBACE;AAAA,eACGX,IAAI,gBAAG,QAAC,SAAD;AAAW,MAAA,WAAW,EAAEY,WAAxB;AAAqC,MAAA,UAAU,EAAEV,UAAjD;AAA6D,MAAA,OAAO,EAAEE;AAAtE;AAAA;AAAA;AAAA;AAAA,YAAH,GAAuF,gBAD9F,eAEE;AAAA,mCAAyB,IAAIU,IAAJ,GAAWC,WAAX,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;GAjCQhB,G;;KAAAA,G;AAmCT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return (\n    <>\n      {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={isLoggedIn} userObj={userObj} /> : \"Initializing..\"}\n      <footer>&copy; Ntwitter {new Date().getFullYear()}</footer>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}