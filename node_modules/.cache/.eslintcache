[{"C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\index.js":"1","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\components\\App.js":"2","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\components\\Router.js":"3","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\routes\\Auth.js":"4","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\routes\\Home.js":"5","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\fbase.js":"6","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\components\\Navigation.js":"7","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\routes\\Profile.js":"8","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\components\\Ntweet.js":"9","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\components\\NtweetFac.js":"10"},{"size":266,"mtime":1636359791552,"results":"11","hashOfConfig":"12"},{"size":1115,"mtime":1636572509478,"results":"13","hashOfConfig":"12"},{"size":1094,"mtime":1636571987307,"results":"14","hashOfConfig":"12"},{"size":2161,"mtime":1636573798457,"results":"15","hashOfConfig":"12"},{"size":1447,"mtime":1636573470187,"results":"16","hashOfConfig":"12"},{"size":678,"mtime":1636560142212,"results":"17","hashOfConfig":"12"},{"size":335,"mtime":1636566814872,"results":"18","hashOfConfig":"12"},{"size":1335,"mtime":1636572021045,"results":"19","hashOfConfig":"12"},{"size":1721,"mtime":1636562431015,"results":"20","hashOfConfig":"12"},{"size":2007,"mtime":1636573520178,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1rnmez0",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"24"},"C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\index.js",[],["49","50"],"C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\components\\App.js",[],"C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\components\\Router.js",["51"],"import React, { useState } from \"react\";\r\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Profile from \"../routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\n// redirect 새로고침시 무조건 홈으로 가게 함\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n            <Redirect from=\"*\" to=\"/\" />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Route exact paht=\"/\">\r\n              <Auth />\r\n            </Route>\r\n            <Redirect from=\"*\" to=\"/\" />\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\nexport default AppRouter;\r\n","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\routes\\Auth.js",["52","53"],"import { authService, firebaseInstance } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Auth = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      if (newAccount) {\r\n        const data = await authService.createUserWithEmailAndPassword(email, password);\r\n      } else {\r\n        const data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    const data = await authService.signInWithPopup(provider);\r\n    console.log(data);\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <input name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange={onChange} />\r\n        <input name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange} />\r\n        <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Sign In\"} />\r\n        {error}\r\n      </form>\r\n      <span onClick={toggleAccount}>{newAccount ? \"Sign In\" : \"Create Account\"}</span>\r\n      <div>\r\n        <button onClick={onSocialClick} name=\"google\">\r\n          Continue with Google\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\">\r\n          Continue with Github\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Auth;\r\n","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\routes\\Home.js",["54","55"],"import { dbService, storageService } from \"fbase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Ntweet from \"components/Ntweet\";\r\nimport NtweetFac from \"components/NtweetFac\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [ntweets, setNtweets] = useState([]);\r\n  // 이 방법을 하면 리렌더링되서 실시간 반영이 안됨.\r\n  //   const getNtweets = async () => {\r\n  //     const dbntweets = await dbService.collection(\"ntweets\").get();\r\n  //     dbntweets.forEach((document) => {\r\n  //       const ntweetObject = {\r\n  //         ...document.data(),\r\n  //         id: document.id,\r\n  //       };\r\n  //       setNtweets((prev) => [ntweetObject, ...prev]);\r\n  //     }); // 새로 작성한 것들과 이전의 것들을 합쳐서 배열로 리턴함.\r\n  //   };\r\n  useEffect(() => {\r\n    // getNtweets();\r\n    dbService.collection(\"ntweets\").onSnapshot((snapshot) => {\r\n      const ntweetArray = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\r\n      setNtweets(ntweetArray);\r\n    });\r\n  }, []);\r\n  //   useEffect(() => {\r\n  //     dbService.collection(\"ntweets\").get();\r\n  //   }, []);\r\n  return (\r\n    <div>\r\n      <NtweetFac userObj={userObj} />\r\n      <div>\r\n        {ntweets.map((ntweet) => (\r\n          <Ntweet key={ntweet.id} ntweetObj={ntweet} isOwner={ntweet.creatorId === userObj.uid} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\fbase.js",[],"C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\components\\Navigation.js",[],"C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\routes\\Profile.js",["56","57"],"import { authService, dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n  const history = useHistory();\r\n  const [NewDisplay, setNewDisplay] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplay(value);\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== NewDisplay) {\r\n      await userObj.updateProfile({\r\n        displayName: NewDisplay,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  const getMyntweet = async () => {\r\n    const getntweet = await dbService.collection(\"ntweets\").where(\"creatorId\", \"==\", userObj.uid).orderBy(\"createdAt\", \"desc\").get();\r\n    console.log(getntweet.docs.map((doc) => doc.data()));\r\n  };\r\n  useEffect(() => {\r\n    getMyntweet();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input onChange={onChange} type=\"text\" placeholder=\"Display Name\" value={NewDisplay} />\r\n        <input type=\"submit\" value=\"Update Profile\" />\r\n      </form>\r\n      <button onClick={onLogOutClick}>Log Out</button>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\components\\Ntweet.js",["58"],"import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Ntweet = ({ ntweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newNtweet, setNewNtweet] = useState(ntweetObj.text);\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure you want to delete this ntweet?\");\r\n    if (ok) {\r\n      await dbService.doc(`ntweets/${ntweetObj.id}`).delete();\r\n      await storageService.refFromURL(ntweetObj.attachmentUrl).delete();\r\n    } //`~\r\n  };\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`ntweets/${ntweetObj.id}`).update({\r\n      text: newNtweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewNtweet(value);\r\n  };\r\n  return (\r\n    <div>\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit}>\r\n            <input type=\"text\" placeholder=\"Edit your ntweet\" value={newNtweet} required onChange={onChange} />\r\n            <input type=\"submit\" value=\"Update ntweet\" />\r\n          </form>\r\n          <button onClick={toggleEditing}>Cancel</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{ntweetObj.text}</h4>\r\n          {ntweetObj.attachmentUrl && <img src={ntweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />}\r\n          {isOwner && (\r\n            <>\r\n              <button onClick={onDeleteClick}>Delete Ntweet</button>\r\n              <button onClick={toggleEditing}>Edit Ntweet</button>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ntweet;\r\n","C:\\Users\\chsid\\OneDrive\\바탕 화면\\React\\Twitter_Clone\\twitter\\src\\components\\NtweetFac.js",["59","60"],"import React, { useEffect, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { storageService, dbService } from \"fbase\";\r\n\r\nconst NtweetFac = ({ userObj }) => {\r\n  const [ntweet, setNtweet] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    const ntweetUpload = {\r\n      text: ntweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection(\"ntweets\").add(ntweetUpload);\r\n    setNtweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNtweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0]; //log에서 알아냄 후에 fileReader API 사용\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result); //url\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n  const onClearPhotoClick = () => setAttachment(null);\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input value={ntweet} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" maxLength={120} />\r\n      <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n      <input type=\"submit\" value=\"Ntweet\" />\r\n      {attachment && (\r\n        <div>\r\n          <img src={attachment} width=\"50px\" height=\"50px\" />\r\n          <button onClick={onClearPhotoClick}>Clear Photo</button>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\nexport default NtweetFac;\r\n",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":25},{"ruleId":"65","severity":1,"message":"69","line":23,"column":15,"nodeType":"67","messageId":"68","endLine":23,"endColumn":19},{"ruleId":"65","severity":1,"message":"69","line":25,"column":15,"nodeType":"67","messageId":"68","endLine":25,"endColumn":19},{"ruleId":"65","severity":1,"message":"70","line":1,"column":21,"nodeType":"67","messageId":"68","endLine":1,"endColumn":35},{"ruleId":"65","severity":1,"message":"71","line":2,"column":16,"nodeType":"67","messageId":"68","endLine":2,"endColumn":22},{"ruleId":"72","severity":1,"message":"73","line":5,"column":1,"nodeType":"74","endLine":44,"endColumn":3},{"ruleId":"75","severity":1,"message":"76","line":34,"column":6,"nodeType":"77","endLine":34,"endColumn":8,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":41,"column":39,"nodeType":"81","endLine":41,"endColumn":103},{"ruleId":"65","severity":1,"message":"82","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":26},{"ruleId":"79","severity":1,"message":"80","line":54,"column":11,"nodeType":"81","endLine":54,"endColumn":62},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'storageService' is defined but never used.","'uuidv4' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyntweet'. Either include it or remove the dependency array.","ArrayExpression",["85"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [getMyntweet]",{"range":"88","text":"89"},[1032,1034],"[getMyntweet]"]